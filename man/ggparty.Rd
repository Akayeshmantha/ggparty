% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggparty.R
\name{ggparty}
\alias{ggparty}
\title{\code{ggplot2} extension for objects of class \code{party}}
\usage{
ggparty(party, horizontal = FALSE, terminal_space, layout = NULL,
  add_vars = NULL)
}
\arguments{
\item{party}{Object of class \code{party}. The elements necessary for the plot will
be extracted and converted to a \code{data.frame}.}

\item{horizontal}{If \code{TRUE} plot will be horizontal.}

\item{terminal_space}{Proportion of the plot that should be reserved for
the terminal nodeplots.}

\item{layout}{Optional layout adjustment. Overrides the coordinates of the
specified nodes. Must be \code{data.frame} containing the
columns "id", "x" and "y". With \code{x} and \code{y} values between 0 and 1.}

\item{add_vars}{Named list containing either strings specifying the locations
of elements to be extracted from
each node of \code{party}  or functions of \code{plot_data()} and node. In either case
returned object
has to be of length 1.}
}
\description{
Converts an object of class \code{party} and calls ggplot
}
\details{
\code{ggparty} can be callled directly with an object of class \code{party}, which will
convert it to a suitbale data.frame and create a call to \code{ggplot} with it as
the \code{data} argument. As usual additional components can then be added with
\code{+}.
The nodes will be spaced equally in the unit square. Specifying
\code{terminal_size} allows to increase or decrease the area for plots of the
terminal nodes.
}
\examples{
library(ggparty)
data("WeatherPlay", package = "partykit")
sp_o <- partysplit(1L, index = 1:3)
sp_h <- partysplit(3L, breaks = 75)
sp_w <- partysplit(4L, index = 1:2)
pn <- partynode(1L, split = sp_o, kids = list(
  partynode(2L, split = sp_h, kids = list(
    partynode(3L, info = "yes"),
    partynode(4L, info = "no"))),
  partynode(5L, info = "yes"),
  partynode(6L, split = sp_w, kids = list(
    partynode(7L, info = "yes"),
    partynode(8L, info = "no")))))
py <- party(pn, WeatherPlay)

ggparty(py) +
  geom_edge() +
  geom_edge_label() +
  geom_node_label(aes(label = splitvar),
                  ids = "inner") +
  geom_node_label(aes(label = info),
                  ids = "terminal")
}
\seealso{
\code{\link[=geom_edge]{geom_edge()}}, \code{\link[=geom_edge_label]{geom_edge_label()}}, \code{\link[=geom_node_label]{geom_node_label()}},
\code{\link[=autoplot.party]{autoplot.party()}}, \code{\link[=geom_node_plot]{geom_node_plot()}}
}
